# Generated by Django 4.2.7 on 2025-08-06 22:02

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('total_games', models.IntegerField(default=0)),
                ('total_wins', models.IntegerField(default=0)),
                ('total_imposter_wins', models.IntegerField(default=0)),
                ('total_detective_wins', models.IntegerField(default=0)),
                ('total_score', models.IntegerField(default=0)),
                ('avatar', models.CharField(default='default', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DecoyQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The decoy question text')),
                ('min_answer', models.IntegerField(default=1)),
                ('max_answer', models.IntegerField(default=20)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('waiting', 'Waiting for Players'), ('in_progress', 'Game in Progress'), ('finished', 'Game Finished')], default='waiting', max_length=20)),
                ('max_players', models.IntegerField(default=8)),
                ('current_round', models.IntegerField(default=0)),
                ('total_rounds', models.IntegerField(default=5)),
                ('is_private', models.BooleanField(default=False)),
                ('room_code', models.CharField(blank=True, max_length=6, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_games', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=50)),
                ('score', models.IntegerField(default=0)),
                ('is_connected', models.BooleanField(default=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='game.gameroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'room')},
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The main question text')),
                ('category', models.CharField(choices=[('lifestyle', 'Lifestyle & Habits'), ('preferences', 'Preferences & Opinions'), ('experiences', 'Experiences'), ('hypothetical', 'Hypothetical'), ('general', 'General')], default='general', max_length=20)),
                ('min_answer', models.IntegerField(default=1, help_text='Minimum expected answer')),
                ('max_answer', models.IntegerField(default=20, help_text='Maximum expected answer')),
                ('difficulty', models.IntegerField(choices=[(1, 'Easy'), (2, 'Medium'), (3, 'Hard')], default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'difficulty'],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=100, unique=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('current_room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.gameroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GameRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('status', models.CharField(choices=[('setup', 'Setting Up'), ('answering', 'Players Answering'), ('discussion', 'Discussion Phase'), ('voting', 'Voting Phase'), ('results', 'Results Phase'), ('finished', 'Round Finished')], default='setup', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('discussion_started_at', models.DateTimeField(blank=True, null=True)),
                ('voting_started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('decoy_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.decoyquestion')),
                ('imposter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imposter_rounds', to='game.player')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.question')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='game.gameroom')),
            ],
            options={
                'unique_together': {('room', 'round_number')},
            },
        ),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('player_joined', 'Player Joined'), ('player_left', 'Player Left'), ('player_reconnected', 'Player Reconnected'), ('game_started', 'Game Started'), ('round_started', 'Round Started'), ('answer_submitted', 'Answer Submitted'), ('discussion_started', 'Discussion Started'), ('voting_started', 'Voting Started'), ('vote_submitted', 'Vote Submitted'), ('round_ended', 'Round Ended'), ('game_ended', 'Game Ended')], max_length=20)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='game.player')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='game.gameroom')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('accused', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes_received', to='game.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='game.gameround')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes_cast', to='game.player')),
            ],
            options={
                'unique_together': {('round', 'voter')},
            },
        ),
        migrations.CreateModel(
            name='PlayerGameStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('role', models.CharField(choices=[('detective', 'Detective'), ('imposter', 'Imposter')], max_length=20)),
                ('result', models.CharField(choices=[('win', 'Win'), ('loss', 'Loss')], max_length=20)),
                ('points_earned', models.IntegerField(default=0)),
                ('was_voted_out', models.BooleanField(default=False)),
                ('correct_votes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to='game.player')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='game.gameroom')),
            ],
            options={
                'unique_together': {('player', 'room', 'round_number')},
            },
        ),
        migrations.CreateModel(
            name='PlayerAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.IntegerField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='game.gameround')),
            ],
            options={
                'unique_together': {('round', 'player')},
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('all_time', 'All Time')], max_length=20)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('total_games', models.IntegerField(default=0)),
                ('total_wins', models.IntegerField(default=0)),
                ('total_score', models.IntegerField(default=0)),
                ('imposter_games', models.IntegerField(default=0)),
                ('imposter_wins', models.IntegerField(default=0)),
                ('detective_games', models.IntegerField(default=0)),
                ('detective_wins', models.IntegerField(default=0)),
                ('rank', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-total_score', '-total_wins'],
                'unique_together': {('user', 'period', 'period_start')},
            },
        ),
    ]
